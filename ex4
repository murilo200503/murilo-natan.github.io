const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

// Inicializar a aplicação
const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Servir arquivos estáticos (HTML, CSS, JS)
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Sistema de Comentários em Tempo Real</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          background-color: #f0f0f0;
          margin: 0;
          padding: 0;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
        }

        #comment-section {
          background-color: white;
          padding: 20px;
          width: 400px;
          border-radius: 8px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        #comments {
          max-height: 300px;
          overflow-y: auto;
          margin-bottom: 15px;
          border: 1px solid #ddd;
          padding: 10px;
        }

        .comment {
          margin-bottom: 10px;
        }

        #comment-input, #username {
          width: 100%;
          padding: 10px;
          margin: 5px 0;
        }

        #send-comment {
          width: 100%;
          padding: 10px;
          background-color: #007bff;
          color: white;
          border: none;
          cursor: pointer;
        }

        #send-comment:hover {
          background-color: #0056b3;
        }
      </style>
    </head>
    <body>
      <div id="comment-section">
        <h1>Comentários</h1>
        <div id="comments"></div>
        <input type="text" id="username" placeholder="Seu nome">
        <textarea id="comment-input" placeholder="Escreva seu comentário..."></textarea>
        <button id="send-comment">Enviar</button>
      </div>

      <script src="/socket.io/socket.io.js"></script>
      <script>
        const socket = io();

        // Elementos do DOM
        const commentsDiv = document.getElementById('comments');
        const sendCommentButton = document.getElementById('send-comment');
        const commentInput = document.getElementById('comment-input');
        const usernameInput = document.getElementById('username');

        // Enviar novo comentário ao servidor
        sendCommentButton.addEventListener('click', () => {
          const comment = {
            username: usernameInput.value,
            text: commentInput.value,
            timestamp: new Date().toLocaleTimeString()
          };
          
          if (comment.username && comment.text) {
            socket.emit('newComment', comment);
            commentInput.value = ''; // Limpar o campo de comentário
          } else {
            alert('Por favor, insira um nome de usuário e um comentário.');
          }
        });

        // Receber novos comentários e exibi-los
        socket.on('newComment', (comment) => {
          const commentElement = document.createElement('div');
          commentElement.classList.add('comment');
          commentElement.innerHTML = \`<strong>\${comment.username}:</strong> \${comment.text} <span>\${comment.timestamp}</span>\`;
          commentsDiv.appendChild(commentElement);
          commentsDiv.scrollTop = commentsDiv.scrollHeight; // Rolar para o último comentário
        });
      </script>
    </body>
    </html>
  `);
});

// Evento de conexão de novos clientes
io.on('connection', (socket) => {
  console.log('Novo usuário conectado');

  // Evento de recebimento de novo comentário
  socket.on('newComment', (comment) => {
    // Enviar o comentário a todos os usuários conectados
    io.emit('newComment', comment);
  });

  // Evento de desconexão do usuário
  socket.on('disconnect', () => {
    console.log('Usuário desconectado');
  });
});

// Inicializar o servidor na porta 3000
server.listen(3000, () => {
  console.log('Servidor rodando na porta 3000');
});