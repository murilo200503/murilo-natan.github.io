-<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>To-Do List com Drag and Drop</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f9f9f9;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    #todo-app {
      background-color: white;
      width: 400px;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h1 {
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button {
      width: 100%;
      padding: 10px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #218838;
    }

    ul {
      list-style-type: none;
      padding: 0;
    }

    li {
      background-color: #f0f0f0;
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: grab;
    }

    li.dragging {
      opacity: 0.5;
    }

    li button {
      background-color: #dc3545;
      border: none;
      padding: 5px 10px;
      color: white;
      cursor: pointer;
      border-radius: 4px;
    }

    li button:hover {
      background-color: #c82333;
    }
  </style>
</head>
<body>
  <div id="todo-app">
    <h1>To-Do List</h1>
    <input type="text" id="new-task-input" placeholder="Nova tarefa">
    <button id="add-task-button">Adicionar</button>
    <ul id="task-list"></ul>
  </div>

  <script>
    const taskInput = document.getElementById('new-task-input');
    const addTaskButton = document.getElementById('add-task-button');
    const taskList = document.getElementById('task-list');

    let draggedItem = null;

    // Função para adicionar uma nova tarefa
    function addTask(taskText) {
      const li = document.createElement('li');
      li.setAttribute('draggable', 'true');
      li.innerHTML = `
        <span>${taskText}</span>
        <button>Remover</button>
      `;

      // Evento para remover a tarefa
      li.querySelector('button').addEventListener('click', () => {
        li.remove();
      });

      // Eventos de drag and drop
      li.addEventListener('dragstart', () => {
        draggedItem = li;
        setTimeout(() => li.classList.add('dragging'), 0);
      });

      li.addEventListener('dragend', () => {
        setTimeout(() => li.classList.remove('dragging'), 0);
        draggedItem = null;
      });

      // Função que define o reordenamento ao soltar o item
      li.addEventListener('dragover', (e) => {
        e.preventDefault();
        const draggingOverItem = getClosestDragTarget(taskList, e.clientY);
        if (draggingOverItem && draggedItem !== draggingOverItem) {
          taskList.insertBefore(draggedItem, draggingOverItem);
        }
      });

      taskList.appendChild(li);
    }

    // Adicionar nova tarefa ao clicar no botão
    addTaskButton.addEventListener('click', () => {
      const taskText = taskInput.value;
      if (taskText) {
        addTask(taskText);
        taskInput.value = ''; // Limpar o campo de entrada
      }
    });

    // Função para encontrar o elemento mais próximo do ponto de drop
    function getClosestDragTarget(container, y) {
      const items = [...container.querySelectorAll('li:not(.dragging)')];
      return items.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }
  </script>
</body>
</html>
